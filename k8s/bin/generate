#!/bin/bash

set -e

REPO_ROOT=$(git rev-parse --show-toplevel)

function usage() {
cat << EOF
usage: $0 <config-dir> <output-dir>
examples:

Use containers and map-data version tags as specified in bin/_headway_version.sh
    $0 builds/planet planet

Use containers from a tag other than what's in bin/_headway_version.sh
    HEADWAY_DATA_TAG=dev $0 builds/planet planet-dev

Use containers and map-data version tags other than whats specified in bin/_headway_version.sh
    HEADWAY_DATA_TAG=dev HEADWAY_CONTAINER_TAG=dev $0 builds/seattle seattle-dev
EOF
}

if [ ! $# -eq 2 ]; then
    usage
    exit 1
fi
BUILD_CONFIG="$1"
OUTPUT_DIR="$2"

DEPLOYMENT_ENV_FILE="${BUILD_CONFIG}/env.sh"

source "${REPO_ROOT}/.env"

# stash env vars in local before they get clobbered by _headway_version.sh
local_data_tag=$HEADWAY_DATA_TAG
source "${REPO_ROOT}/bin/_headway_version.sh"
export HEADWAY_DATA_TAG="${local_data_tag:-$HEADWAY_DATA_TAG}"

export HEADWAY_CONTAINER_TAG="${HEADWAY_CONTAINER_TAG:-latest}"

source "$DEPLOYMENT_ENV_FILE"

PELIAS_CONFIG_FILE="${REPO_ROOT}/data/${HEADWAY_AREA}.pelias.json"
if [ ! -f "$PELIAS_CONFIG_FILE" ]; then
    echo "Missing pelias config file: ${PELIAS_CONFIG_FILE}"
    exit 1
fi
PELIAS_CONFIG_JSON=$(cat $PELIAS_CONFIG_FILE)

indent4() { while IFS= read -r line; do printf '    %s\n' "$line"; done; }
export PELIAS_CONFIG_JSON_YAML="|
$(echo "$PELIAS_CONFIG_JSON" | indent4)"

function render_template() {
    local file=$1
    local output="${2:-$(basename $file | sed 's/\.tpl$//')}"

    envsubst < "$file" > "${OUTPUT_DIR}/${output}"
}

set -o nounset

mkdir -p "$OUTPUT_DIR"
rm -f "${OUTPUT_DIR}"/*

function generate_transit() {
  local otp_endpoints=""
  local separator=", "
  for headway_transit_area in $HEADWAY_TRANSIT_AREAS; do
      local otp_endpoint_name=$(generate_otp $headway_transit_area);

      otp_endpoints+="${separator}\"http://${otp_endpoint_name}:8000/otp/routers\""
  done

  export OTP_ENDPOINTS_JSON="[\"http://valhalla:8002\"${otp_endpoints}]"
  render_template "_template/travelmux-deployment.yaml.tpl"
}

function log() {
    echo $@ 1>&2
}

function generate_otp() {
    local headway_transit_area=$1
    if [ -z "$headway_transit_area" ]; then
        echo "must specify headway_transit_area to $0"
        exit 1
    fi

    # Lowercase transit area for idiomatic k8s names
    export TRANSIT_AREA=$(echo $headway_transit_area | tr '[:upper:]' '[:lower:]')
    export OTP_GRAPH_URL="${HEADWAY_K8S_ARTIFACT_ROOT}/${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}/${headway_transit_area}.graph.obj.zst"
    export OTP_ENDPOINT_NAME="opentripplanner-${TRANSIT_AREA}"

    local router_config_file="${BUILD_CONFIG}/transit/${headway_transit_area}-router-config.json"
    if [ -f "$router_config_file" ]; then
        export OTP_ROUTER_CONFIG_JSON_YAML="|
$(indent4 < "$router_config_file")"
    else
        # blank keys or "null" keys don't appear in the config map
        # which causes an error in pod creation
        export OTP_ROUTER_CONFIG_JSON_YAML='""'
    fi

    for file in _template/opentripplanner*.tpl; do
        output=$(basename $file | sed 's/\.tpl$//' | sed "s/AREA/${TRANSIT_AREA}/")
        render_template $file $output
    done
    echo $OTP_ENDPOINT_NAME
}

if [[ "$HEADWAY_ENABLE_TRANSIT_ROUTING" != 0 ]]; then
    generate_transit
fi

# NOTE: we *do* want to enable the travelmux *service*, regardless
# of if transit routing is enabled - otherwise our nginx frontend will fail
# to start up due to the inability to resolve DNS. A better solution might
# be to remove the travelmux section from nginx altogether when transit
# routing is disabled, but that's beyond the capabilities of the simple
# envsubst we're using. For now then, we copy in the service defintion.
render_template "_template/travelmux-service.yaml.tpl"

shopt -s extglob
for file in _template/!(opentripplanner*|travelmux*).tpl
do
    render_template $file
done


