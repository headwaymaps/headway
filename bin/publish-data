#!/bin/bash -e

function usage() {
  cat << EOF
Copy deployment artifacts to asset host
usage: $0 <build-dir> [ --host remote.host.com ]
examples:
    # Copy to asset root on this host
    $0 builds/planet
    # Copy to asset root on remote host
    $0 builds/planet --host maps-data.local

Use an upload prefix other than what's in bin/_headway_version.sh
    HEADWAY_DATA_TAG=dev $0 builds/seattle
EOF
}

if [ "$#" -lt 1 ] || [ "$#" -gt 3 ]; then
  usage
  exit 1
fi
BUILD_DIR=$1

HOST=""
if [ "$#" -eq 3 ]; then
    if [ "$2" != "--host" ]; then
        usage
    fi
    HOST=$3
fi

REPO_ROOT=$(git rev-parse --show-toplevel)
DATA_ROOT="${REPO_ROOT}/data"

DATA_ROOT="${REPO_ROOT}/data"

OUTPUT_DIR="/pool1/www/data.maps.earth"

upload_pids=()
function kill_uploads() {
  echo "Killing any in-progress uploads before exiting"
  for pid in ${upload_pids[*]}; do
    kill "${pid[*]}"
  done
}

trap kill_uploads EXIT

function upload() {
  local input_glob=$1
  local output_prefix=$2

  local input_path_glob="${DATA_ROOT}/${input_glob}"
  if ! ls $input_path_glob 1> /dev/null 2>&1; then
    echo "target file doesn't exist: '${input_path_glob}'"
    exit 1
  fi

  for input_path in $input_path_glob; do
    local resource="${output_prefix}/$(basename "$input_path")"
    local output_path="${OUTPUT_DIR}/${resource}"

    set -o nounset
    if [ -z "$HOST" ]; then
        echo "Copying ${input_path} -> ${output_path}"
        mkdir -p "$(dirname $output_path)"
        cp "$input_path" "$output_path"
    else
        echo "Sycning ${input_path} -> ${HOST}:${output_path}"
        ssh "$HOST" mkdir -p "$(dirname $output_path)"
        rsync -av --progress -e ssh "$input_path" "${HOST}:${output_path}"
    fi
  done
}

source "${REPO_ROOT}/.env"

# stash env vars in local before they get clobbered by _headway_version.sh
local_data_tag=$HEADWAY_DATA_TAG
source "${REPO_ROOT}/bin/_headway_version.sh"

if [ ! -z "$HEADWAY_TAG" ]; then
  HEADWAY_DATA_TAG="$HEADWAY_TAG"
fi

export HEADWAY_DATA_TAG="${local_data_tag:-$HEADWAY_DATA_TAG}"

DEPLOYMENT_ENV_FILE="${BUILD_DIR}/env.sh"
if [ ! -f "$DEPLOYMENT_ENV_FILE" ]; then
    echo "missing file ${DEPLOYMENT_ENV_FILE}"
    exit 1
fi
source "$DEPLOYMENT_ENV_FILE"

set -o nounset

upload "${HEADWAY_AREA}.valhalla.tar.zst"      "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"
upload "${HEADWAY_AREA}.elasticsearch.tar.zst" "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"
upload "${HEADWAY_AREA}.mbtiles"               "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"
upload "${HEADWAY_AREA}.placeholder.tar.zst"   "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"
upload "${HEADWAY_AREA}.osm.pbf"               "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"

# Upload transit
upload "${HEADWAY_AREA}*.graph.obj.zst" "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"
upload "${HEADWAY_AREA}*.gtfs.tar.zst"  "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"

# These files are generic across all areas
upload terrain.mbtiles "${HEADWAY_DATA_TAG}"
upload landcover.mbtiles "${HEADWAY_DATA_TAG}"

rets=()
for pid in ${upload_pids[*]}; do
  wait $pid
  status=$?
  rets+=($status)
  if [ ! $status ]; then
    echo "error in upload"
    exit $status
  fi
done

echo "Return codes: ${rets[*]}"

# Todo: just do it automatically
echo "Do you want to 'bin/link-latest-transit ${BUILD_DIR}' next?"
